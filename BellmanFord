//Bellman Ford
function BellmanFord(Graph, V, E, src)
{
    var distance = Array(V).fill(1000000);
    distance[src] = 0;
    for (var i = 0; i < V - 1; i++)
    {
        for (var j = 0; j < E; j++)
        {
            if ((distance[Graph[j][0]] + Graph[j][2]) < distance[Graph[j][1]])
                distance[Graph[j][1]] = distance[Graph[j][0]] + Graph[j][2];
        }
    }
    for (var i = 0; i < E; i++)
    {
        var x = Graph[i][0];
        var y = Graph[i][1];
        var weight = Graph[i][2];
        if ((distance[x] != 1000000) && (distance[x] + weight < distance[y]))
            console.log("Graph contains negative" + " weight cycle");
    }
    console.log("Vertex Distance from Source");
    for (var i = 0; i < V; i++)
        console.log(i + "   " + distance[i]);
}
var V = 5; 
var E = 8; 
var Graph = [[ 0, 1, -1 ], [ 0, 2, 4 ],
                [ 1, 2, 3 ], [ 1, 3, 2 ],
                [ 1, 4, 2 ], [ 3, 2, 5 ],
                [ 3, 1, 1 ], [ 4, 3, -3 ]];
BellmanFord(Graph, V, E, 0);
//Output-
//Vertex Distance from Source
//0   0
//1   -1
//2   2
//3   -2
//4   1 
