#Bellman Ford
# The main function that finds shortest distances from source to
# all other vertices using Bellman-Ford algorithm. The function
# also detects negative weight cycle
class Graph:    
    def __init__(self, Vertices):
        self.V = Vertices 
        self.graph = []
    def AddEdge(self, x, y, w):
        self.graph.append([x, y, w])
    def printArr(self, distance):
        print("Vertex Distance from the source:")
        for i in range(self.V):
            print("{0}\t\t{1}".format(i, distance[i]))
    def BellmanFord(self, src):
        distance = [float("Inf")] * self.V
        distance[src] = 0
        for _ in range(self.V - 1):
            for x, y, w in self.graph:
                if distance[x] != float("Inf") and distance[x] + w < distance[y]:
                        distance[y] = distance[x] + w
        for x, y, w in self.graph:
                if distance[x] != float("Inf") and distance[x] + w < distance[y]:
                        print("Graph contains negative weight cycle")
                        return
        self.printArr(distance) 
g = Graph(5)
g.AddEdge(0, 1, 2)
g.AddEdge(0, 2, 4)
g.AddEdge(1, 3, 2)
g.AddEdge(2, 4, 3)
g.AddEdge(2, 3, 4)
g.AddEdge(4, 3, -5)
g.BellmanFord(0)
#Output->
#Vertex Distance from the source:
#0               0
#1               2
#2               4
#3               2
#4               7
